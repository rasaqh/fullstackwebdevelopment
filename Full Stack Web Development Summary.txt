Java Script and Full stack web development
=================================================
JavaScript-libraries
===================
The sample app is done with so called vanilla JavaScript, using only the DOM-API and JavaScript to manipulate the structure of the pages.

Instead of using JavaScript and the DOM-API only, different libraries containing tools that are easier to work with compared to the DOM-API are often 
used to manipulate pages. One of these libraries is the ever-so-popular jQuery.

jQuery was developed back when web applications mainly followed the traditional style of the server generating HTML pages, the functionality of which
 was enhanced on the browser side using JavaScript written with jQuery. One of the reasons for the success of jQuery was its so-called cross-browser
 compatibility. The library worked regardless of the browser or the company that made it, so there was no need for browser-specific solutions. 
 Nowadays using jQuery is not as justified given the advancement of JavaScript, and the most popular browsers generally support basic functionalities well.

The rise of the single page app brought several more "modern" ways of web development than jQuery. The favorite of the first wave of developers 
was BackboneJS. After its launch in 2012, Google's AngularJS quickly became almost the de facto standard of modern web development.

However, the popularity of Angular plummeted in October 2014 after the Angular team announced that support for version 1 will end, and Angular 2 will not 
be backwards compatible with the first version. Angular 2 and the newer versions have not gotten too warm of a welcome.

Currently the most popular tool for implementing the browser-side logic of web-applications is Facebook's React library. During this course, we will get 
familiar with React and the Redux library, which are frequently used together.

The status of React seems strong, but the world of JavaScript is ever changing. For example, recently a newcomer - VueJS - has been capturing some interest.

Full stack web development
===========================
What does the name of the course, Full stack web development, mean? Full stack is a buzzword that everyone talks about, 
while no one really knows what it means. Or at least, there is no agreed-upon definition for the term.

Practically all web applications have (at least) two "layers": the browser, being closer to the end-user, is the top layer, 
and the server the bottom one. There is often also a database layer below the server. We can therefore think of the architecture 
of a web application as a kind of stack of layers.

Often, we also talk about the frontend and the backend. The browser is the frontend, and JavaScript that runs on the browser is 
frontend code. The server on the other hand is the backend.

In the context of this course, full stack web development means that we focus on all parts of the application: the frontend, the backend, 
and the database. Sometimes the software on the server and its operating system are seen as parts of the stack, but we won't go into those.

We will code the backend with JavaScript, using the Node.js runtime environment. Using the same programming language on multiple layers of
 the stack gives full stack web development a whole new dimension. However, it's not a requirement of full stack web development to use the
 same programming language (JavaScript) for all layers of the stack.

It used to be more common for developers to specialize in one layer of the stack, for example the backend. Technologies on the backend and 
the frontend were quite different. With the Full stack trend, it has become common for developers to be proficient on all layers of the 
application and the database. Oftentimes, full stack developers must also have enough configuration and administration skills to operate 
their application, for example, in the cloud.

JavaScript fatigue
====================
Full stack web development is challenging in many ways. Things are happening in many places at once, and debugging is quite a bit harder than 
with regular desktop applications. JavaScript does not always work as you'd expect it to (compared to many other languages), and the asynchronous 
way its runtime environments work causes all sorts of challenges. Communicating on the web requires knowledge of the HTTP protocol. One must also
 handle databases and server administration and configuration. It would also be good to know enough CSS to make applications at least somewhat presentable.

The world of JavaScript develops fast, which brings its own set of challenges. Tools, libraries and the language itself are under constant
 development. Some are starting to get tired of the constant change, and have coined a term for it: JavaScript fatigue. See How to Manage 
 JavaScript Fatigue on auth0 or JavaScript fatigue on Medium.

You will suffer from JavaScript fatigue yourself during this course. Fortunately for us, there are a few ways to smooth the learning curve, 
and we can start with coding instead of configuration. We can't avoid configuration completely, but we can merrily push ahead in the next few 
weeks while avoiding the worst of configuration hells.